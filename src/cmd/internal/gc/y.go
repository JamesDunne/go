//line go.y:21
package gc

import __yyfmt__ "fmt"

//line go.y:21
import (
	"strings"
)

//line go.y:27
type yySymType struct {
	yys  int
	node *Node
	list *NodeList
	typ  *Type
	sym  *Sym
	val  Val
	i    int
}

const LLITERAL = 57346
const LASOP = 57347
const LCOLAS = 57348
const LBREAK = 57349
const LCASE = 57350
const LCHAN = 57351
const LCONST = 57352
const LCONTINUE = 57353
const LDDD = 57354
const LDEFAULT = 57355
const LDEFER = 57356
const LELSE = 57357
const LFALL = 57358
const LFOR = 57359
const LFUNC = 57360
const LGO = 57361
const LGOTO = 57362
const LIF = 57363
const LIMPORT = 57364
const LINTERFACE = 57365
const LMAP = 57366
const LNAME = 57367
const LPACKAGE = 57368
const LRANGE = 57369
const LRETURN = 57370
const LSELECT = 57371
const LSTRUCT = 57372
const LSWITCH = 57373
const LTHEN = 57374
const LTYPE = 57375
const LVAR = 57376
const LANDAND = 57377
const LANDNOT = 57378
const LBODY = 57379
const LCOMM = 57380
const LDEC = 57381
const LEQ = 57382
const LGE = 57383
const LGT = 57384
const LIGNORE = 57385
const LINC = 57386
const LLE = 57387
const LLSH = 57388
const LLT = 57389
const LNE = 57390
const LOROR = 57391
const LRSH = 57392
const NotPackage = 57393
const NotParen = 57394
const PreferToRightParen = 57395

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LLITERAL",
	"LASOP",
	"LCOLAS",
	"LBREAK",
	"LCASE",
	"LCHAN",
	"LCONST",
	"LCONTINUE",
	"LDDD",
	"LDEFAULT",
	"LDEFER",
	"LELSE",
	"LFALL",
	"LFOR",
	"LFUNC",
	"LGO",
	"LGOTO",
	"LIF",
	"LIMPORT",
	"LINTERFACE",
	"LMAP",
	"LNAME",
	"LPACKAGE",
	"LRANGE",
	"LRETURN",
	"LSELECT",
	"LSTRUCT",
	"LSWITCH",
	"LTHEN",
	"LTYPE",
	"LVAR",
	"LANDAND",
	"LANDNOT",
	"LBODY",
	"LCOMM",
	"LDEC",
	"LEQ",
	"LGE",
	"LGT",
	"LIGNORE",
	"LINC",
	"LLE",
	"LLSH",
	"LLT",
	"LNE",
	"LOROR",
	"LRSH",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"NotPackage",
	"NotParen",
	"'('",
	"')'",
	"PreferToRightParen",
	"';'",
	"'.'",
	"'$'",
	"'='",
	"':'",
	"'{'",
	"'}'",
	"'!'",
	"'~'",
	"'['",
	"']'",
	"'?'",
	"'@'",
	"','",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line go.y:2253
func fixlbrace(lbr int) {
	// If the opening brace was an LBODY,
	// set up for another one now that we're done.
	// See comment in lex.C about loophack.
	if lbr == LBODY {
		loophack = 1
	}
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 17,
	1, 1,
	64, 23,
	-2, 0,
	-1, 48,
	6, 278,
	67, 278,
	77, 278,
	-2, 49,
	-1, 57,
	68, 155,
	-2, 164,
	-1, 75,
	61, 183,
	-2, 217,
	-1, 76,
	61, 184,
	-2, 185,
	-1, 122,
	61, 136,
	65, 136,
	69, 136,
	73, 136,
	-2, 268,
	-1, 126,
	61, 136,
	65, 136,
	69, 136,
	73, 136,
	-2, 269,
	-1, 178,
	2, 217,
	37, 217,
	61, 183,
	69, 217,
	-2, 175,
	-1, 179,
	37, 185,
	61, 184,
	69, 185,
	-2, 176,
	-1, 186,
	64, 253,
	70, 253,
	-2, 0,
	-1, 244,
	64, 253,
	70, 253,
	-2, 0,
	-1, 254,
	8, 253,
	13, 253,
	64, 253,
	70, 253,
	-2, 0,
	-1, 328,
	4, 238,
	64, 238,
	70, 238,
	-2, 159,
	-1, 411,
	37, 178,
	61, 178,
	69, 178,
	-2, 169,
	-1, 412,
	37, 179,
	61, 179,
	69, 179,
	-2, 170,
	-1, 413,
	37, 180,
	61, 180,
	69, 180,
	-2, 171,
	-1, 414,
	37, 181,
	61, 181,
	69, 181,
	-2, 172,
	-1, 420,
	8, 253,
	13, 253,
	64, 253,
	70, 253,
	-2, 0,
	-1, 421,
	64, 253,
	70, 253,
	-2, 0,
	-1, 502,
	64, 253,
	70, 253,
	-2, 0,
	-1, 557,
	61, 159,
	-2, 320,
	-1, 558,
	61, 160,
	-2, 319,
	-1, 583,
	8, 253,
	13, 253,
	64, 253,
	70, 253,
	-2, 0,
	-1, 597,
	37, 182,
	61, 182,
	69, 182,
	-2, 173,
}

const yyNprod = 354
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 2188

var yyAct = [...]int{

	48, 75, 11, 615, 402, 245, 288, 34, 385, 462,
	550, 307, 188, 299, 294, 76, 554, 231, 104, 490,
	404, 482, 405, 359, 393, 305, 293, 461, 341, 306,
	289, 327, 247, 331, 321, 470, 342, 377, 86, 250,
	248, 471, 323, 340, 105, 14, 243, 130, 176, 472,
	109, 157, 473, 483, 521, 417, 102, 376, 110, 10,
	221, 13, 631, 656, 473, 210, 604, 546, 328, 175,
	178, 328, 6, 450, 589, 13, 214, 426, 313, 190,
	588, 193, 162, 174, 179, 107, 163, 312, 200, 667,
	335, 585, 637, 70, 164, 194, 240, 195, 325, 215,
	215, 215, 215, 183, 324, 232, 229, 334, 636, 12,
	13, 229, 608, 431, 229, 211, 330, 229, 12, 13,
	230, 12, 13, 630, 629, 230, 205, 109, 230, 605,
	389, 230, 256, 632, 207, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 130, 130, 280, 228,
	224, 206, 235, 175, 178, 297, 285, 285, 291, 285,
	241, 328, 541, 199, 216, 218, 220, 298, 179, 532,
	56, 186, 178, 303, 420, 196, 10, 201, 202, 283,
	625, 388, 528, 520, 229, 452, 179, 304, 199, 229,
	229, 157, 229, 199, 451, 464, 199, 334, 230, 199,
	464, 408, 420, 230, 230, 396, 230, 343, 598, 343,
	343, 12, 13, 236, 10, 449, 10, 130, 177, 301,
	401, 10, 420, 244, 333, 229, 12, 13, 488, 130,
	165, 166, 167, 168, 169, 170, 171, 172, 665, 230,
	618, 229, 337, 465, 229, 229, 10, 229, 465, 381,
	296, 383, 463, 358, 89, 230, 356, 184, 230, 230,
	374, 230, 365, 420, 12, 13, 12, 13, 117, 419,
	397, 12, 13, 173, 382, 10, 199, 156, 390, 379,
	378, 199, 199, 223, 199, 448, 311, 175, 178, 185,
	406, 370, 467, 363, 411, 406, 12, 13, 54, 418,
	212, 398, 179, 361, 229, 229, 438, 317, 412, 92,
	413, 87, 177, 10, 229, 91, 368, 199, 230, 230,
	372, 395, 420, 614, 49, 12, 13, 187, 230, 511,
	177, 416, 609, 199, 512, 661, 199, 199, 155, 199,
	119, 119, 343, 343, 127, 606, 579, 573, 157, 115,
	563, 165, 172, 343, 130, 89, 443, 433, 436, 229,
	469, 130, 184, 12, 13, 445, 468, 494, 229, 10,
	447, 129, 446, 230, 440, 501, 10, 458, 484, 130,
	130, 495, 230, 496, 457, 285, 199, 428, 175, 178,
	285, 627, 190, 513, 185, 392, 199, 199, 414, 498,
	427, 229, 516, 179, 519, 111, 199, 229, 503, 477,
	439, 524, 525, 507, 387, 230, 91, 373, 229, 12,
	13, 230, 487, 369, 515, 362, 12, 13, 10, 336,
	101, 522, 230, 100, 229, 85, 20, 530, 543, 660,
	529, 343, 511, 343, 659, 558, 177, 512, 230, 343,
	658, 199, 343, 533, 650, 339, 624, 354, 355, 199,
	199, 621, 333, 564, 542, 613, 612, 537, 343, 611,
	539, 497, 602, 601, 559, 600, 229, 597, 12, 13,
	278, 279, 587, 286, 229, 566, 562, 569, 576, 567,
	230, 494, 494, 199, 544, 580, 581, 536, 230, 199,
	326, 332, 175, 178, 509, 495, 495, 496, 496, 577,
	199, 527, 406, 518, 593, 406, 406, 179, 578, 595,
	596, 582, 10, 124, 517, 493, 199, 514, 584, 9,
	500, 499, 590, 534, 591, 486, 480, 479, 10, 343,
	538, 57, 476, 90, 343, 444, 424, 177, 375, 300,
	435, 364, 619, 610, 106, 106, 113, 116, 108, 575,
	343, 251, 572, 371, 460, 120, 120, 229, 199, 120,
	442, 623, 12, 13, 103, 357, 199, 285, 570, 255,
	190, 230, 484, 199, 199, 622, 437, 253, 12, 13,
	453, 182, 634, 351, 494, 497, 497, 343, 635, 628,
	626, 474, 558, 435, 118, 343, 646, 642, 495, 386,
	496, 90, 640, 647, 506, 7, 644, 290, 71, 5,
	435, 651, 652, 175, 178, 213, 406, 106, 58, 24,
	657, 16, 106, 434, 19, 113, 645, 516, 179, 249,
	599, 655, 494, 648, 459, 649, 367, 121, 432, 493,
	493, 343, 668, 565, 343, 669, 495, 666, 496, 199,
	662, 177, 122, 126, 69, 338, 225, 671, 285, 79,
	672, 237, 123, 123, 242, 620, 308, 209, 125, 208,
	21, 309, 94, 84, 80, 10, 199, 295, 478, 545,
	83, 547, 328, 556, 26, 485, 254, 560, 497, 28,
	561, 77, 160, 79, 638, 639, 391, 159, 670, 586,
	57, 643, 125, 278, 279, 394, 571, 84, 80, 10,
	161, 68, 325, 158, 83, 120, 120, 326, 324, 535,
	502, 583, 234, 78, 199, 12, 13, 320, 421, 332,
	31, 22, 12, 13, 15, 360, 497, 23, 203, 198,
	18, 106, 493, 3, 314, 233, 8, 4, 2, 315,
	316, 238, 318, 1, 454, 217, 548, 78, 57, 12,
	13, 227, 89, 97, 549, 552, 553, 249, 57, 249,
	616, 99, 177, 491, 191, 95, 81, 603, 82, 441,
	73, 72, 607, 10, 239, 366, 98, 96, 481, 319,
	493, 222, 154, 329, 246, 135, 150, 653, 153, 633,
	136, 140, 141, 654, 380, 139, 151, 138, 137, 134,
	152, 142, 143, 144, 145, 146, 147, 148, 149, 93,
	204, 128, 17, 91, 403, 322, 25, 350, 27, 36,
	37, 425, 284, 12, 13, 641, 352, 417, 67, 112,
	556, 348, 346, 557, 39, 38, 35, 282, 347, 281,
	90, 74, 219, 114, 410, 592, 351, 55, 69, 508,
	510, 88, 0, 79, 422, 423, 0, 466, 0, 0,
	0, 360, 125, 349, 429, 0, 106, 84, 80, 10,
	0, 0, 0, 106, 83, 0, 0, 113, 0, 489,
	249, 345, 66, 12, 13, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 62, 0, 65, 59,
	0, 0, 60, 0, 0, 68, 0, 0, 0, 410,
	0, 0, 0, 407, 79, 63, 64, 78, 0, 12,
	13, 0, 0, 125, 57, 57, 0, 0, 84, 80,
	10, 0, 120, 0, 120, 83, 0, 0, 0, 0,
	0, 0, 540, 234, 120, 0, 249, 0, 0, 0,
	0, 314, 0, 0, 0, 551, 555, 526, 0, 0,
	198, 0, 0, 0, 360, 0, 233, 466, 531, 0,
	0, 466, 226, 0, 0, 0, 568, 360, 78, 0,
	12, 13, 227, 0, 0, 0, 310, 0, 69, 0,
	0, 41, 0, 79, 47, 42, 249, 0, 44, 0,
	40, 50, 125, 43, 45, 53, 57, 84, 80, 10,
	150, 0, 46, 52, 83, 51, 0, 32, 30, 0,
	151, 0, 66, 0, 152, 0, 574, 0, 0, 146,
	147, 148, 149, 0, 0, 61, 62, 0, 65, 59,
	0, 0, 60, 0, 0, 68, 0, 0, 150, 0,
	0, 0, 0, 311, 0, 63, 64, 78, 151, 12,
	13, 0, 152, 142, 143, 144, 145, 146, 147, 148,
	149, 0, 0, 0, 0, 0, 29, 106, 69, 249,
	0, 41, 0, 79, 47, 42, 0, 57, 44, 0,
	40, 50, 33, 43, 45, 53, 0, 84, 80, 10,
	0, 0, 46, 52, 83, 51, 0, 32, 30, 0,
	551, 0, 66, 555, 360, 0, 0, 466, 0, 0,
	0, 360, 69, 360, 0, 61, 62, 79, 65, 59,
	0, 0, 60, 0, 0, 68, 125, 0, 0, 0,
	0, 84, 80, 10, 0, 63, 64, 78, 83, 12,
	13, 0, 0, 0, 0, 0, 66, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	62, 0, 65, 59, 0, 0, 60, 0, 69, 68,
	0, 0, 0, 79, 0, 0, 0, 594, 0, 63,
	64, 78, 125, 12, 13, 0, 0, 84, 80, 10,
	0, 505, 0, 0, 83, 0, 0, 0, 0, 0,
	0, 0, 66, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 79, 0, 0, 61, 62, 0, 65, 59,
	0, 125, 60, 0, 0, 68, 84, 80, 10, 0,
	504, 0, 0, 83, 0, 63, 64, 78, 0, 12,
	13, 66, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 62, 0, 65, 59, 0,
	0, 60, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 63, 64, 78, 154, 12, 13,
	135, 150, 0, 153, 0, 136, 140, 141, 0, 0,
	139, 151, 138, 137, 134, 152, 142, 143, 144, 145,
	146, 147, 148, 149, 69, 0, 0, 0, 0, 79,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 400,
	350, 0, 0, 84, 80, 10, 0, 0, 0, 352,
	83, 0, 0, 399, 348, 346, 344, 0, 181, 0,
	0, 347, 0, 69, 0, 0, 0, 0, 79, 351,
	0, 61, 62, 0, 65, 180, 0, 125, 60, 0,
	0, 68, 84, 80, 10, 0, 349, 0, 0, 83,
	0, 63, 64, 78, 0, 12, 13, 181, 353, 0,
	0, 0, 0, 0, 345, 0, 0, 13, 0, 0,
	61, 62, 0, 65, 180, 0, 0, 60, 0, 69,
	68, 292, 0, 0, 79, 0, 0, 0, 0, 0,
	63, 64, 78, 125, 12, 13, 0, 0, 84, 80,
	10, 0, 287, 0, 0, 83, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 61, 62, 79, 65,
	59, 189, 0, 60, 0, 0, 68, 125, 0, 0,
	0, 0, 84, 80, 10, 0, 63, 64, 78, 83,
	12, 13, 0, 0, 0, 0, 0, 66, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 79, 0, 0,
	61, 62, 0, 65, 59, 0, 125, 60, 0, 0,
	68, 84, 80, 10, 0, 0, 0, 0, 83, 0,
	63, 64, 78, 0, 12, 13, 66, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 79, 0, 0, 61,
	62, 0, 65, 59, 0, 125, 60, 0, 0, 68,
	84, 80, 10, 0, 0, 0, 0, 83, 0, 63,
	64, 78, 0, 12, 13, 181, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 302, 0, 0, 61, 62,
	0, 65, 180, 0, 125, 60, 0, 0, 68, 84,
	80, 10, 0, 0, 0, 0, 83, 0, 63, 64,
	78, 0, 12, 13, 66, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 62, 0,
	65, 59, 0, 0, 60, 0, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 63, 64, 78,
	154, 12, 13, 135, 150, 0, 153, 0, 136, 140,
	141, 0, 0, 139, 151, 138, 137, 134, 152, 142,
	143, 144, 145, 146, 147, 148, 149, 0, 0, 154,
	0, 0, 135, 150, 0, 153, 664, 136, 140, 141,
	0, 0, 139, 151, 138, 137, 134, 152, 142, 143,
	144, 145, 146, 147, 148, 149, 0, 0, 154, 0,
	0, 135, 150, 0, 153, 663, 136, 140, 141, 0,
	0, 139, 151, 138, 137, 134, 152, 142, 143, 144,
	145, 146, 147, 148, 149, 0, 79, 0, 0, 0,
	0, 0, 0, 0, 523, 125, 79, 0, 0, 252,
	84, 80, 10, 0, 0, 125, 0, 83, 0, 0,
	84, 80, 10, 0, 0, 234, 0, 83, 0, 0,
	79, 0, 0, 0, 0, 234, 0, 0, 0, 125,
	79, 0, 198, 0, 84, 80, 10, 0, 233, 125,
	0, 83, 198, 0, 84, 80, 10, 0, 233, 234,
	78, 83, 12, 13, 430, 0, 0, 0, 0, 234,
	78, 0, 12, 13, 302, 0, 198, 0, 0, 0,
	0, 0, 492, 125, 79, 0, 198, 0, 84, 80,
	10, 0, 233, 125, 78, 83, 12, 13, 84, 80,
	10, 0, 0, 234, 78, 83, 12, 13, 79, 0,
	0, 0, 0, 409, 0, 0, 0, 125, 350, 0,
	198, 0, 84, 80, 10, 0, 233, 352, 0, 83,
	198, 0, 348, 346, 344, 0, 415, 192, 78, 347,
	12, 13, 0, 0, 0, 0, 0, 351, 78, 0,
	12, 13, 350, 0, 198, 475, 0, 0, 0, 0,
	197, 352, 350, 0, 349, 0, 348, 346, 344, 0,
	617, 352, 78, 347, 12, 13, 348, 346, 344, 0,
	0, 351, 345, 347, 0, 13, 350, 0, 0, 0,
	0, 456, 0, 0, 0, 352, 0, 0, 349, 0,
	348, 346, 344, 0, 0, 0, 0, 347, 349, 0,
	0, 0, 0, 0, 455, 351, 345, 0, 0, 13,
	0, 131, 0, 0, 0, 0, 345, 0, 0, 13,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	345, 135, 150, 13, 153, 133, 136, 140, 141, 384,
	132, 139, 151, 138, 137, 134, 152, 142, 143, 144,
	145, 146, 147, 148, 149, 0, 154, 0, 0, 135,
	150, 0, 153, 0, 136, 140, 141, 0, 0, 139,
	151, 138, 137, 134, 152, 142, 143, 144, 145, 146,
	147, 148, 149, 154, 0, 0, 135, 150, 0, 153,
	0, 136, 140, 141, 0, 0, 139, 151, 138, 137,
	134, 152, 142, 143, 144, 145, 146, 147, 148, 149,
	154, 0, 0, 135, 150, 0, 0, 0, 136, 140,
	141, 0, 0, 139, 151, 138, 137, 134, 152, 142,
	143, 144, 145, 146, 147, 148, 149, 135, 150, 0,
	0, 0, 136, 140, 141, 0, 0, 139, 151, 138,
	137, 134, 152, 142, 143, 144, 145, 146, 147, 148,
	149, 135, 150, 0, 0, 0, 136, 140, 141, 0,
	0, 139, 151, 138, 137, 0, 152, 142, 143, 144,
	145, 146, 147, 148, 149, 150, 0, 0, 0, 136,
	140, 141, 0, 0, 139, 151, 138, 137, 0, 152,
	142, 143, 144, 145, 146, 147, 148, 149,
}
var yyPact = [...]int{

	-1000, -1000, 603, 599, -1000, 413, -1000, 616, 622, 382,
	-1000, -1000, -1000, 686, -1000, -1000, 614, 1104, 381, 260,
	-1000, 254, 773, 379, -1000, 376, -1000, -1000, -1000, -1000,
	523, 507, 354, 298, -1000, -1000, -1000, -1000, -1000, 210,
	-1000, 413, 413, 670, 670, 413, 1518, -1000, 1976, 281,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 21, 1518,
	1518, 1518, 1518, 1518, 1518, 1518, 1518, 214, 1557, -1000,
	-1000, -1000, 540, 230, -1000, -1000, -1000, 335, 1479, 1859,
	15, -1000, -1000, 230, 230, -1000, -1000, 778, 599, -1000,
	685, 683, 40, 244, -1000, 610, -15, -15, -15, -1,
	-1000, -1000, -1000, 231, 935, -1000, -1000, -1000, 161, 704,
	-1000, 34, 1791, -1000, 164, 1757, 536, -1000, -1000, -1000,
	-1000, -1000, -1000, 21, -1000, 528, -1000, -1000, -1000, -26,
	2031, 1518, -1000, -1000, 1518, 1518, 1518, 1518, 1518, 1518,
	1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518,
	1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1435, 1518,
	590, 1518, 1379, 199, 1518, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 497, 2031, -1000, -1000, -1000, -1000,
	1557, 1596, 1518, -1000, -1000, -1000, 1014, -1000, 13, 4,
	2031, -1000, 1791, -1000, -1000, -1000, -1000, 1791, 1791, 252,
	1791, 677, 46, 375, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 671, 1937, -1000, 1351, 1937, -1000, 164,
	524, 413, 371, -1000, -1000, 236, 1518, 413, -1000, -1000,
	-1000, -1000, -1000, 1791, 647, 369, -1000, 234, 1518, 363,
	-1000, -1000, -1000, -1000, 1014, 496, -20, -1000, -1000, 1757,
	-1000, -1000, 1791, 1757, 1014, 1757, 2031, 2106, 2129, 1042,
	1042, 1042, 1042, 1042, 1042, 1004, 1004, 1004, 1004, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2058, 2004, -26, -26,
	2031, -1000, 582, 360, -1000, -1000, 124, 1518, -1000, 341,
	-1000, -1000, -1000, 203, -1000, -1000, 1340, 1285, 162, 874,
	142, -1000, 1835, 780, 874, 209, -1000, -1000, -1000, -1000,
	-1000, -1000, 1791, 1791, -1000, 494, -1000, 413, 3, 333,
	-1000, -1000, 1747, 654, 588, 535, -1000, -1000, 251, 320,
	-1000, -1000, 519, -1000, 605, 493, 361, -1000, 318, 316,
	-1000, -1000, -1000, -1000, -1000, 221, 0, 135, 126, 1937,
	1913, 645, 513, 201, 235, 312, 306, 413, -13, -1000,
	1903, 490, 413, 1518, -26, -1000, 485, 1791, 484, 413,
	1518, -26, 483, 413, 168, 1781, 1757, -1000, -1000, -1000,
	-1000, 479, -1000, 478, 1518, -1000, -1000, 1518, 1243, 1204,
	2031, 587, 1518, 444, 582, 475, -22, 1557, 472, 461,
	-1000, 1518, 123, -23, -1000, -1000, 1696, -1000, -1000, 1825,
	-1000, -1000, -1000, -1000, -1000, 1791, 459, -1000, 122, -1000,
	1014, 1014, -1000, -1000, -1000, -1000, 1791, 109, 43, 654,
	413, -1000, -1000, 445, 605, 251, 654, 605, 413, 102,
	146, -1000, 1757, 442, -1000, -1000, -1000, -1000, 1937, -7,
	1937, 413, 838, -1000, -1000, 565, 1937, -1000, -1000, 1937,
	413, 296, -1000, 206, -1000, 659, -1000, 201, -1000, -1000,
	437, -25, 413, 413, 654, 1937, -1000, -1000, -26, -1000,
	-1000, 293, -1000, -1000, 704, -26, -1000, -1000, -1000, 508,
	-1000, -1000, 1757, -1000, -1000, -1000, -1000, -1000, -1000, 1781,
	1781, 2082, 1014, 292, 1518, 1518, -1000, -1000, -1000, -1000,
	-1000, 1557, 23, -1000, -1000, 430, -1000, -1000, -1000, 6,
	-1000, 874, -1000, 1148, 874, 874, 425, -1000, -1000, -1000,
	148, -1000, -1000, -1000, -1000, -1000, 654, 423, -1000, 421,
	-1000, -1000, -1000, 420, -1000, -1000, 1937, -8, 59, 291,
	-1000, 1937, 42, 278, -1000, 502, -1000, -1000, -1000, 417,
	-1000, -1000, 414, -1000, 424, -1000, 269, 1869, 501, -1000,
	-1000, 654, 409, 413, 234, 1757, 404, -1000, 120, 1518,
	2031, 2031, 331, 1014, 56, -1000, -1000, -1000, -1000, 1518,
	-1000, -1000, -1000, 2031, -1000, 38, 22, -1000, -1000, -1000,
	654, 654, 1781, -1000, 1937, -1000, 413, 654, -1000, 838,
	413, -1000, 1869, 206, -1000, -1000, -1000, 413, -1000, 413,
	-1000, -1000, -1000, 402, -1000, -1000, -1000, -1000, 268, -1000,
	1518, 1518, 1557, 636, -11, 874, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 398, -1000, 392, 387, 283,
	1781, 1667, 1638, -1000, -1000, 227, -1000, 19, 1869, -1000,
	-1000, 1869, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1518, 582, -1000,
}
var yyPgo = [...]int{

	0, 103, 881, 533, 31, 113, 29, 571, 32, 880,
	879, 11, 105, 42, 0, 877, 875, 22, 14, 873,
	872, 871, 869, 867, 866, 6, 865, 691, 33, 20,
	864, 93, 40, 48, 308, 44, 12, 859, 614, 30,
	638, 858, 628, 852, 850, 7, 849, 180, 848, 58,
	13, 846, 46, 19, 8, 18, 845, 334, 844, 4,
	26, 842, 841, 24, 823, 819, 817, 25, 5, 814,
	813, 56, 811, 34, 809, 686, 53, 21, 808, 804,
	801, 800, 39, 799, 798, 796, 17, 159, 794, 15,
	793, 1, 2, 76, 27, 9, 23, 16, 10, 790,
	3, 41, 35, 786, 785, 784, 776, 250, 43, 775,
	36, 28, 774, 773, 768, 767, 766, 763, 72, 45,
	760, 38, 758, 90, 757, 754, 751, 750, 748, 741,
	740, 733, 730, 725, 719, 718, 717, 716, 712, 37,
	711, 706, 692,
}
var yyR1 = [...]int{

	0, 113, 115, 115, 117, 114, 116, 116, 120, 120,
	120, 121, 121, 122, 122, 2, 2, 2, 118, 124,
	124, 125, 119, 51, 51, 51, 51, 51, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 127, 71,
	71, 71, 76, 76, 77, 77, 77, 37, 49, 45,
	45, 45, 45, 45, 45, 9, 9, 9, 9, 128,
	11, 129, 10, 63, 63, 130, 54, 43, 43, 43,
	23, 23, 23, 22, 131, 24, 25, 25, 132, 133,
	134, 26, 135, 64, 65, 65, 66, 66, 136, 137,
	46, 138, 44, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 15, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 42, 42, 42, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 50, 29, 17, 17, 16, 16, 40, 40,
	18, 18, 32, 1, 1, 34, 35, 38, 38, 3,
	3, 3, 92, 92, 31, 30, 82, 82, 7, 7,
	7, 7, 7, 7, 33, 33, 33, 33, 88, 88,
	88, 88, 88, 80, 80, 81, 90, 90, 90, 90,
	90, 12, 12, 89, 89, 89, 89, 89, 89, 89,
	86, 87, 85, 85, 84, 84, 48, 19, 19, 20,
	20, 91, 52, 52, 53, 53, 53, 140, 21, 21,
	61, 61, 72, 72, 78, 78, 79, 79, 74, 74,
	70, 70, 73, 73, 73, 73, 73, 73, 4, 4,
	13, 28, 28, 28, 83, 8, 8, 8, 8, 69,
	69, 68, 68, 6, 6, 6, 6, 6, 27, 27,
	27, 27, 27, 141, 27, 27, 27, 27, 27, 27,
	27, 27, 67, 67, 56, 56, 55, 55, 57, 57,
	60, 60, 58, 58, 58, 58, 59, 59, 123, 123,
	139, 139, 36, 36, 62, 62, 39, 39, 102, 102,
	106, 106, 104, 104, 5, 5, 142, 142, 142, 142,
	142, 142, 93, 109, 107, 107, 107, 112, 112, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	111, 110, 96, 96, 98, 97, 97, 100, 100, 99,
	99, 95, 95, 95, 94, 94, 126, 126, 101, 101,
	105, 105, 103, 103,
}
var yyR2 = [...]int{

	0, 4, 0, 3, 0, 3, 0, 3, 2, 5,
	3, 3, 2, 1, 3, 1, 2, 2, 4, 0,
	1, 0, 4, 0, 1, 1, 1, 1, 2, 5,
	3, 2, 5, 7, 3, 2, 5, 3, 1, 2,
	4, 3, 4, 3, 1, 2, 1, 1, 2, 1,
	3, 3, 3, 2, 2, 3, 5, 5, 2, 0,
	4, 0, 3, 0, 2, 0, 4, 4, 4, 2,
	5, 1, 1, 2, 0, 3, 1, 3, 0, 0,
	0, 8, 0, 5, 0, 2, 0, 2, 0, 0,
	7, 0, 5, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 1, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 5, 6, 1, 1,
	3, 5, 5, 4, 6, 8, 1, 5, 5, 5,
	7, 1, 0, 3, 1, 4, 1, 4, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 4, 4, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 4, 4, 2, 3, 5, 1, 1,
	2, 3, 5, 3, 5, 3, 3, 5, 8, 5,
	8, 5, 0, 3, 0, 1, 3, 1, 4, 2,
	0, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	1, 3, 3, 2, 4, 3, 5, 5, 1, 3,
	1, 2, 1, 3, 4, 1, 2, 2, 1, 1,
	3, 0, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 1, 2, 2, 2, 2,
	2, 2, 1, 3, 1, 3, 1, 3, 1, 3,
	1, 3, 1, 1, 3, 3, 0, 2, 0, 1,
	0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
	0, 1, 0, 1, 0, 1, 4, 4, 5, 6,
	4, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 5, 4, 4, 2, 2, 4, 3,
	3, 5, 3, 4, 3, 5, 1, 0, 1, 3,
	1, 1, 2, 1, 1, 5, 0, 2, 1, 3,
	1, 3, 1, 3,
}
var yyChk = [...]int{

	-1000, -113, -114, -117, -115, 26, -118, 26, -116, -3,
	25, -92, 75, 76, -119, -125, 25, -61, -120, 22,
	64, 4, -126, -124, 25, -51, -75, -48, -27, 2,
	34, -127, 33, 18, -45, -24, -46, -44, -26, -30,
	16, 7, 11, 19, 14, 20, 28, 10, -14, -57,
	17, 31, 29, 21, -34, -15, -47, -3, -40, 55,
	58, 51, 52, 71, 72, 54, 38, -41, 61, 4,
	-31, -42, -80, -81, -21, -91, -89, -140, 73, 9,
	24, -85, -84, 30, 23, 64, -121, 61, -2, 4,
	-3, 65, 65, 66, -142, 22, 34, 10, 33, 18,
	64, 64, -71, 61, -55, -35, -3, -76, 61, -55,
	-49, 61, -37, -3, -19, 61, -3, 68, -38, -34,
	-3, -38, -42, -40, -3, 18, -42, -34, -62, -57,
	-14, 5, 44, 39, 49, 35, 40, 48, 47, 45,
	41, 42, 51, 52, 53, 54, 55, 56, 57, 58,
	36, 46, 50, 38, 32, 67, 6, 77, -131, -136,
	-138, -132, 61, 65, 73, -47, -47, -47, -47, -47,
	-47, -47, -47, 69, -18, -14, -33, -87, -91, -89,
	55, 38, 61, -1, 37, 69, -1, 2, -36, 12,
	-14, -88, 38, -91, -89, -86, -12, 61, 55, -31,
	73, -1, -1, -122, 62, -121, -118, -119, 4, 4,
	25, 75, 66, 25, -93, -92, -93, -109, -93, -20,
	-93, 61, -72, 62, -71, -7, 67, 77, -87, -91,
	-89, -86, -12, 61, 38, -76, 62, -7, 67, -79,
	62, -49, -7, -52, 69, -68, -69, -8, -32, -3,
	-82, -7, 12, 61, -141, 61, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -57, -57,
	-14, -22, -23, -39, -43, -45, -57, 27, -25, -39,
	37, -25, 62, -60, -18, -3, 61, -14, -36, -50,
	62, -33, 9, -14, -50, -67, -6, -11, -75, -27,
	2, 69, 74, 74, -7, -7, -7, 65, -7, -74,
	70, -73, -56, -13, 61, 55, -34, -4, 25, -70,
	70, -28, -34, -4, 61, -123, 64, -119, 4, -107,
	-108, -111, -110, -92, 25, 73, 24, 30, 23, 55,
	9, 38, 18, 67, -107, -107, -52, 61, -101, -96,
	-3, -123, 64, 67, -57, -35, -7, 9, -123, 64,
	67, -57, -123, 64, -67, 62, 77, -139, -32, -82,
	-7, -68, -6, -68, 15, -54, 37, 64, 67, 6,
	-14, -137, 64, -63, -133, -139, 12, 77, -18, 33,
	74, 68, -59, -58, -29, -17, -14, 69, 69, 38,
	-7, -91, -89, -86, -12, 61, -139, 77, -59, 70,
	64, -128, -7, -7, 62, -3, 74, -123, 64, -7,
	77, -5, 4, -13, 55, 25, -13, 61, 65, -123,
	64, -83, 61, -4, 62, -121, 64, 64, 74, 4,
	73, 69, 69, -107, -112, 61, 38, -108, -110, 9,
	61, -94, -95, 61, 4, 52, -3, 67, 64, 64,
	-102, -101, 62, 77, -107, 12, 62, -71, -57, 62,
	62, -78, -77, -76, -55, -57, 62, -49, 70, -3,
	-53, -90, 61, -87, -91, -89, -86, -12, -8, 62,
	62, -14, -130, -39, 27, 27, 37, -39, -10, 70,
	-9, 8, 13, -54, 62, -139, -18, 62, 62, -36,
	70, 77, -139, 68, -50, -50, -7, 62, 70, -6,
	-67, -7, 70, -73, -5, -34, 62, -13, -5, -13,
	-3, 70, -28, -68, 62, -107, 74, -107, -106, -105,
	-98, -3, -104, -103, -97, -3, -107, 25, -92, -111,
	-107, -107, -102, 64, -95, 4, -94, 62, -3, -96,
	-5, -107, -123, 64, -7, 61, -68, -53, -67, 64,
	-14, -14, -63, -129, -60, 68, -134, 62, 74, 68,
	-29, -17, -16, -14, 69, -59, -59, 62, 70, -5,
	62, 62, 62, -107, 74, 70, 64, -107, 70, 64,
	61, 62, 62, 51, 64, -100, -99, 61, -107, 61,
	-5, 62, -77, -68, 62, 70, -39, 70, -67, 68,
	67, 6, 77, -65, -36, -50, 70, 70, -5, -5,
	-53, -107, -98, -5, -97, -102, -100, -95, -102, -102,
	62, -14, -14, -66, -64, 15, 74, -59, 62, 62,
	62, 62, -53, 68, 68, 21, -11, 70, -100, -100,
	-135, -25, -54,
}
var yyDef = [...]int{

	4, -2, 2, 0, 6, 0, 21, 0, 220, 0,
	159, 160, 161, 0, 5, 346, 19, -2, 0, 0,
	3, 0, 0, 0, 20, 0, 24, 25, 26, 27,
	0, 0, 0, 0, 258, 259, 260, 261, 262, 0,
	265, 157, 157, 0, 0, 0, 294, 38, -2, 0,
	74, 88, 91, 78, 165, 93, 94, -2, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 128,
	129, 136, 0, 0, 141, -2, -2, 0, 292, 0,
	0, 198, 199, 0, 0, 7, 8, 0, 21, 15,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 0,
	18, 221, 28, 0, 0, 276, 156, 31, 0, 0,
	35, 0, 0, 47, 212, 251, 0, 263, 266, 158,
	155, 267, -2, 0, 164, 0, -2, 270, 271, 295,
	278, 0, 53, 54, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 296, 296,
	0, 296, 0, 0, 292, 117, 118, 119, 120, 121,
	122, 123, 124, 142, 0, 150, 151, 174, -2, -2,
	0, 0, 0, 142, 153, 154, -2, 219, 0, 0,
	293, 195, 0, 178, 179, 180, 181, 0, 0, 191,
	0, 0, 0, 288, 10, 13, 21, 12, 16, 17,
	162, 163, 22, 0, 0, 312, 0, 0, 313, 212,
	0, 0, 288, 30, 222, 39, 0, 0, 168, 169,
	170, 171, 172, 0, 0, 288, 34, 0, 0, 288,
	37, 226, 48, 206, -2, 0, 290, 249, 245, 164,
	248, 152, 166, 251, -2, 251, 50, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 0, 51, 52,
	279, 75, 0, 71, 72, 297, 0, 0, 89, 76,
	63, 79, 125, 290, 280, 130, 0, 293, 0, 286,
	149, 177, 0, 290, 286, 0, 272, 254, 255, 256,
	257, 59, 0, 0, 196, 0, 200, 0, 0, 288,
	203, 228, 0, 304, 0, 0, 274, 240, -2, 288,
	205, 230, 0, 242, 0, 0, 289, 11, 0, 0,
	314, 315, 316, 319, 320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 348,
	0, 0, 289, 0, 41, 277, 0, 0, 0, 289,
	0, 43, 0, 289, 0, 214, 291, 252, 246, 247,
	167, 0, 264, 0, 0, 73, 65, 296, 0, 0,
	69, 0, 296, 0, 0, 0, 290, 291, 0, 0,
	133, 292, 0, 290, 282, 283, 144, 142, 142, 0,
	201, -2, -2, -2, -2, 0, 0, 291, 0, 218,
	-2, -2, 193, 194, 182, 192, 0, 0, 289, 304,
	0, 233, 305, 0, 0, 238, 304, 0, 0, 0,
	289, 241, 251, 0, 9, 14, 306, 307, 0, 0,
	0, 300, 302, 326, 327, 0, 0, 317, 318, 0,
	298, 0, 344, 0, 341, 0, 343, 0, 310, 311,
	0, 299, 0, 0, 304, 0, 29, 223, 40, 173,
	32, 288, 224, 44, 46, 42, 36, 227, 213, 164,
	211, 215, 251, 186, 187, 188, 189, 190, 250, 214,
	214, 115, -2, 0, 0, 0, 63, 77, 64, 92,
	61, 0, 0, 80, 126, 0, 281, 131, 132, 0,
	139, 291, 287, 0, 286, 286, 0, 137, 138, 273,
	0, 197, 202, 229, 232, 275, 304, 0, 235, 0,
	239, 204, 231, 0, 243, 321, 0, 0, 0, 301,
	350, 0, 0, 303, 352, 0, 336, -2, -2, 0,
	329, 330, 0, 308, 0, 342, 0, 337, 0, 349,
	332, 304, 0, 289, 45, 251, 0, 207, 0, 296,
	67, 68, 0, -2, 0, 58, 84, 127, 134, 292,
	284, 285, 143, 146, 142, 0, 0, -2, 60, 234,
	304, 304, 214, 322, 0, 324, 0, 304, 325, 0,
	298, 328, 337, 0, 309, 209, 338, 298, 340, 298,
	333, 33, 225, 0, 216, 66, 70, 90, 62, 55,
	0, 0, 0, 86, 0, 286, 145, 140, 236, 237,
	244, 323, 351, 334, 353, 0, 331, 0, 0, 0,
	214, 0, 0, 81, 85, 0, 135, 0, 337, 345,
	339, 337, 208, 56, 57, 82, 87, 147, 335, 210,
	296, 0, 83,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 71, 3, 3, 66, 57, 58, 3,
	61, 62, 55, 51, 77, 52, 65, 56, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 68, 64,
	3, 67, 3, 75, 76, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 73, 3, 74, 54, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 69, 53, 70, 72,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 59,
	60, 63,
}
var yyTok3 = [...]int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lookahead func() int
	state     func() int
}

func (p *yyParserImpl) Lookahead() int {
	return p.lookahead()
}

func yyNewParser() yyParser {
	p := &yyParserImpl{
		lookahead: func() int { return -1 },
		state:     func() int { return -1 },
	}
	return p
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}
	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	var yyDollar []yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yytoken := -1 // yychar translated into internal numbering
	yyrcvr.state = func() int { return yystate }
	yyrcvr.lookahead = func() int { return yychar }
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yychar = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar, yytoken = yylex1(yylex, &yylval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yychar = -1
		yytoken = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar, yytoken = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yychar = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:130
		{
			xtop = concat(xtop, yyDollar[4].list)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:136
		{
			prevlineno = lineno
			Yyerror("package statement must be first")
			errorexit()
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:142
		{
			mkpackage(yyDollar[2].sym.Name)
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:152
		{
			importpkg = Runtimepkg

			if Debug['A'] != 0 {
				cannedimports("runtime.Builtin", "package runtime\n\n$$\n\n")
			} else {
				cannedimports("runtime.Builtin", runtimeimport)
			}
			curio.importsafe = true
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:164
		{
			importpkg = nil
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:178
		{
			ipkg := importpkg
			my := importmyname
			importpkg = nil
			importmyname = nil

			if my == nil {
				my = Lookup(ipkg.Name)
			}

			pack := Nod(OPACK, nil, nil)
			pack.Sym = my
			pack.Pkg = ipkg
			pack.Lineno = int32(yyDollar[1].i)

			if strings.HasPrefix(my.Name, ".") {
				importdot(ipkg, pack)
				break
			}
			if my.Name == "init" {
				Yyerror("cannot import package as init - init must be a func")
				break
			}
			if my.Name == "_" {
				break
			}
			if my.Def != nil {
				lineno = int32(yyDollar[1].i)
				redeclare(my, "as imported package name")
			}
			my.Def = pack
			my.Lastlineno = int32(yyDollar[1].i)
			my.Block = 1 // at top level
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:213
		{
			// When an invalid import path is passed to importfile,
			// it calls Yyerror and then sets up a fake import with
			// no package statement. This allows us to test more
			// than one invalid import statement in a single file.
			if nerrors == 0 {
				Fatal("phase error in import")
			}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:229
		{
			// import with original name
			yyVAL.i = parserline()
			importmyname = nil
			importfile(&yyDollar[1].val, yyVAL.i)
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:236
		{
			// import with given name
			yyVAL.i = parserline()
			importmyname = yyDollar[1].sym
			importfile(&yyDollar[2].val, yyVAL.i)
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:243
		{
			// import into my name space
			yyVAL.i = parserline()
			importmyname = Lookup(".")
			importfile(&yyDollar[2].val, yyVAL.i)
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:252
		{
			if importpkg.Name == "" {
				importpkg.Name = yyDollar[2].sym.Name
				numImport[yyDollar[2].sym.Name]++
			} else if importpkg.Name != yyDollar[2].sym.Name {
				Yyerror("conflicting names %s and %s for package %q", importpkg.Name, yyDollar[2].sym.Name, importpkg.Path)
			}
			importpkg.Direct = 1
			importpkg.Safe = curio.importsafe

			if safemode != 0 && !curio.importsafe {
				Yyerror("cannot import unsafe package %q", importpkg.Path)
			}
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:269
		{
			if yyDollar[1].sym.Name == "safe" {
				curio.importsafe = true
			}
		}
	case 21:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:276
		{
			defercheckwidth()
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:280
		{
			resumecheckwidth()
			unimportfile()
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:289
		{
			Yyerror("empty top-level declaration")
			yyVAL.list = nil
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:295
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:299
		{
			Yyerror("non-declaration statement outside function body")
			yyVAL.list = nil
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:304
		{
			yyVAL.list = nil
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:310
		{
			yyVAL.list = yyDollar[2].list
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:314
		{
			yyVAL.list = yyDollar[3].list
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:318
		{
			yyVAL.list = nil
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:322
		{
			yyVAL.list = yyDollar[2].list
			iota_ = -100000
			lastconst = nil
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:328
		{
			yyVAL.list = yyDollar[3].list
			iota_ = -100000
			lastconst = nil
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line go.y:334
		{
			yyVAL.list = concat(yyDollar[3].list, yyDollar[5].list)
			iota_ = -100000
			lastconst = nil
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:340
		{
			yyVAL.list = nil
			iota_ = -100000
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:345
		{
			yyVAL.list = list1(yyDollar[2].node)
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:349
		{
			yyVAL.list = yyDollar[3].list
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:353
		{
			yyVAL.list = nil
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:359
		{
			iota_ = 0
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:365
		{
			yyVAL.list = variter(yyDollar[1].list, yyDollar[2].node, nil)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:369
		{
			yyVAL.list = variter(yyDollar[1].list, yyDollar[2].node, yyDollar[4].list)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:373
		{
			yyVAL.list = variter(yyDollar[1].list, nil, yyDollar[3].list)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:379
		{
			yyVAL.list = constiter(yyDollar[1].list, yyDollar[2].node, yyDollar[4].list)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:383
		{
			yyVAL.list = constiter(yyDollar[1].list, nil, yyDollar[3].list)
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:390
		{
			yyVAL.list = constiter(yyDollar[1].list, yyDollar[2].node, nil)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:394
		{
			yyVAL.list = constiter(yyDollar[1].list, nil, nil)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:400
		{
			// different from dclname because the name
			// becomes visible right here, not at the end
			// of the declaration.
			yyVAL.node = typedcl0(yyDollar[1].sym)
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:409
		{
			yyVAL.node = typedcl1(yyDollar[1].node, yyDollar[2].node, true)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:415
		{
			yyVAL.node = yyDollar[1].node

			// These nodes do not carry line numbers.
			// Since a bare name used as an expression is an error,
			// introduce a wrapper node to give the correct line.
			switch yyVAL.node.Op {
			case ONAME, ONONAME, OTYPE, OPACK, OLITERAL:
				yyVAL.node = Nod(OPAREN, yyVAL.node, nil)
				yyVAL.node.Implicit = true
				break
			}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:429
		{
			yyVAL.node = Nod(OASOP, yyDollar[1].node, yyDollar[3].node)
			yyVAL.node.Etype = uint8(yyDollar[2].i) // rathole to pass opcode
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:434
		{
			if yyDollar[1].list.Next == nil && yyDollar[3].list.Next == nil {
				// simple
				yyVAL.node = Nod(OAS, yyDollar[1].list.N, yyDollar[3].list.N)
				break
			}
			// multiple
			yyVAL.node = Nod(OAS2, nil, nil)
			yyVAL.node.List = yyDollar[1].list
			yyVAL.node.Rlist = yyDollar[3].list
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:446
		{
			if yyDollar[3].list.N.Op == OTYPESW {
				yyVAL.node = Nod(OTYPESW, nil, yyDollar[3].list.N.Right)
				if yyDollar[3].list.Next != nil {
					Yyerror("expr.(type) must be alone in list")
				}
				if yyDollar[1].list.Next != nil {
					Yyerror("argument count mismatch: %d = %d", count(yyDollar[1].list), 1)
				} else if (yyDollar[1].list.N.Op != ONAME && yyDollar[1].list.N.Op != OTYPE && yyDollar[1].list.N.Op != ONONAME) || isblank(yyDollar[1].list.N) {
					Yyerror("invalid variable name %s in type switch", yyDollar[1].list.N)
				} else {
					yyVAL.node.Left = dclname(yyDollar[1].list.N.Sym)
				} // it's a colas, so must not re-use an oldname.
				break
			}
			yyVAL.node = colas(yyDollar[1].list, yyDollar[3].list, int32(yyDollar[2].i))
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:464
		{
			yyVAL.node = Nod(OASOP, yyDollar[1].node, Nodintconst(1))
			yyVAL.node.Implicit = true
			yyVAL.node.Etype = OADD
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:470
		{
			yyVAL.node = Nod(OASOP, yyDollar[1].node, Nodintconst(1))
			yyVAL.node.Implicit = true
			yyVAL.node.Etype = OSUB
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:478
		{
			var n, nn *Node

			// will be converted to OCASE
			// right will point to next case
			// done in casebody()
			markdcl()
			yyVAL.node = Nod(OXCASE, nil, nil)
			yyVAL.node.List = yyDollar[2].list
			if typesw != nil && typesw.Right != nil {
				n = typesw.Right.Left
				if n != nil {
					// type switch - declare variable
					nn = newname(n.Sym)
					declare(nn, dclcontext)
					yyVAL.node.Nname = nn

					// keep track of the instances for reporting unused
					nn.Defn = typesw.Right
				}
			}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:501
		{
			var n *Node

			// will be converted to OCASE
			// right will point to next case
			// done in casebody()
			markdcl()
			yyVAL.node = Nod(OXCASE, nil, nil)
			if yyDollar[2].list.Next == nil {
				n = Nod(OAS, yyDollar[2].list.N, yyDollar[4].node)
			} else {
				n = Nod(OAS2, nil, nil)
				n.List = yyDollar[2].list
				n.Rlist = list1(yyDollar[4].node)
			}
			yyVAL.node.List = list1(n)
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:519
		{
			// will be converted to OCASE
			// right will point to next case
			// done in casebody()
			markdcl()
			yyVAL.node = Nod(OXCASE, nil, nil)
			yyVAL.node.List = list1(colas(yyDollar[2].list, list1(yyDollar[4].node), int32(yyDollar[3].i)))
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:528
		{
			var n, nn *Node

			markdcl()
			yyVAL.node = Nod(OXCASE, nil, nil)
			if typesw != nil && typesw.Right != nil {
				n = typesw.Right.Left
				if n != nil {
					// type switch - declare variable
					nn = newname(n.Sym)
					declare(nn, dclcontext)
					yyVAL.node.Nname = nn

					// keep track of the instances for reporting unused
					nn.Defn = typesw.Right
				}
			}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:549
		{
			markdcl()
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:553
		{
			if yyDollar[3].list == nil {
				yyVAL.node = Nod(OEMPTY, nil, nil)
			} else {
				yyVAL.node = liststmt(yyDollar[3].list)
			}
			popdcl()
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:564
		{
			// If the last token read by the lexer was consumed
			// as part of the case, clear it (parser has cleared yychar).
			// If the last token read by the lexer was the lookahead
			// leave it alone (parser has it cached in yychar).
			// This is so that the stmt_list action doesn't look at
			// the case tokens if the stmt_list is empty.
			yylast = yychar
			yyDollar[1].node.Xoffset = int64(block)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:575
		{
			// This is the only place in the language where a statement
			// list is not allowed to drop the final semicolon, because
			// it's the only place where a statement list is not followed
			// by a closing brace.  Handle the error for pedantry.

			// Find the final token of the statement list.
			// yylast is lookahead; yyprev is last of stmt_list
			last := yyprev

			if last > 0 && last != ';' && yychar != '}' {
				Yyerror("missing statement after label")
			}
			yyVAL.node = yyDollar[1].node
			yyVAL.node.Nbody = yyDollar[3].list
			popdcl()
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:594
		{
			yyVAL.list = nil
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:598
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[2].node)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:604
		{
			markdcl()
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:608
		{
			yyVAL.list = yyDollar[3].list
			popdcl()
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:615
		{
			yyVAL.node = Nod(ORANGE, nil, yyDollar[4].node)
			yyVAL.node.List = yyDollar[1].list
			yyVAL.node.Etype = 0 // := flag
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:621
		{
			yyVAL.node = Nod(ORANGE, nil, yyDollar[4].node)
			yyVAL.node.List = yyDollar[1].list
			yyVAL.node.Colas = true
			colasdefn(yyDollar[1].list, yyVAL.node)
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:628
		{
			yyVAL.node = Nod(ORANGE, nil, yyDollar[2].node)
			yyVAL.node.Etype = 0 // := flag
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:635
		{
			// init ; test ; incr
			if yyDollar[5].node != nil && yyDollar[5].node.Colas {
				Yyerror("cannot declare in the for-increment")
			}
			yyVAL.node = Nod(OFOR, nil, nil)
			if yyDollar[1].node != nil {
				yyVAL.node.Ninit = list1(yyDollar[1].node)
			}
			yyVAL.node.Ntest = yyDollar[3].node
			yyVAL.node.Nincr = yyDollar[5].node
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:648
		{
			// normal test
			yyVAL.node = Nod(OFOR, nil, nil)
			yyVAL.node.Ntest = yyDollar[1].node
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:657
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.Nbody = concat(yyVAL.node.Nbody, yyDollar[2].list)
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:664
		{
			markdcl()
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:668
		{
			yyVAL.node = yyDollar[3].node
			popdcl()
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:675
		{
			// test
			yyVAL.node = Nod(OIF, nil, nil)
			yyVAL.node.Ntest = yyDollar[1].node
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:681
		{
			// init ; test
			yyVAL.node = Nod(OIF, nil, nil)
			if yyDollar[1].node != nil {
				yyVAL.node.Ninit = list1(yyDollar[1].node)
			}
			yyVAL.node.Ntest = yyDollar[3].node
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:693
		{
			markdcl()
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:697
		{
			if yyDollar[3].node.Ntest == nil {
				Yyerror("missing condition in if statement")
			}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:703
		{
			yyDollar[3].node.Nbody = yyDollar[5].list
		}
	case 81:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line go.y:707
		{
			var n *Node
			var nn *NodeList

			yyVAL.node = yyDollar[3].node
			n = yyDollar[3].node
			popdcl()
			for nn = concat(yyDollar[7].list, yyDollar[8].list); nn != nil; nn = nn.Next {
				if nn.N.Op == OIF {
					popdcl()
				}
				n.Nelse = list1(nn.N)
				n = nn.N
			}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:725
		{
			markdcl()
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:729
		{
			if yyDollar[4].node.Ntest == nil {
				Yyerror("missing condition in if statement")
			}
			yyDollar[4].node.Nbody = yyDollar[5].list
			yyVAL.list = list1(yyDollar[4].node)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:738
		{
			yyVAL.list = nil
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:742
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[2].list)
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:747
		{
			yyVAL.list = nil
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:751
		{
			l := &NodeList{N: yyDollar[2].node}
			l.End = l
			yyVAL.list = l
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:759
		{
			markdcl()
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:763
		{
			var n *Node
			n = yyDollar[3].node.Ntest
			if n != nil && n.Op != OTYPESW {
				n = nil
			}
			typesw = Nod(OXXX, typesw, n)
		}
	case 90:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line go.y:772
		{
			yyVAL.node = yyDollar[3].node
			yyVAL.node.Op = OSWITCH
			yyVAL.node.List = yyDollar[6].list
			typesw = typesw.Left
			popdcl()
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:782
		{
			typesw = Nod(OXXX, typesw, nil)
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:786
		{
			yyVAL.node = Nod(OSELECT, nil, nil)
			yyVAL.node.Lineno = typesw.Lineno
			yyVAL.node.List = yyDollar[4].list
			typesw = typesw.Left
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:800
		{
			yyVAL.node = Nod(OOROR, yyDollar[1].node, yyDollar[3].node)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:804
		{
			yyVAL.node = Nod(OANDAND, yyDollar[1].node, yyDollar[3].node)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:808
		{
			yyVAL.node = Nod(OEQ, yyDollar[1].node, yyDollar[3].node)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:812
		{
			yyVAL.node = Nod(ONE, yyDollar[1].node, yyDollar[3].node)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:816
		{
			yyVAL.node = Nod(OLT, yyDollar[1].node, yyDollar[3].node)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:820
		{
			yyVAL.node = Nod(OLE, yyDollar[1].node, yyDollar[3].node)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:824
		{
			yyVAL.node = Nod(OGE, yyDollar[1].node, yyDollar[3].node)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:828
		{
			yyVAL.node = Nod(OGT, yyDollar[1].node, yyDollar[3].node)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:832
		{
			yyVAL.node = Nod(OADD, yyDollar[1].node, yyDollar[3].node)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:836
		{
			yyVAL.node = Nod(OSUB, yyDollar[1].node, yyDollar[3].node)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:840
		{
			yyVAL.node = Nod(OOR, yyDollar[1].node, yyDollar[3].node)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:844
		{
			yyVAL.node = Nod(OXOR, yyDollar[1].node, yyDollar[3].node)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:848
		{
			yyVAL.node = Nod(OMUL, yyDollar[1].node, yyDollar[3].node)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:852
		{
			yyVAL.node = Nod(ODIV, yyDollar[1].node, yyDollar[3].node)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:856
		{
			yyVAL.node = Nod(OMOD, yyDollar[1].node, yyDollar[3].node)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:860
		{
			yyVAL.node = Nod(OAND, yyDollar[1].node, yyDollar[3].node)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:864
		{
			yyVAL.node = Nod(OANDNOT, yyDollar[1].node, yyDollar[3].node)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:868
		{
			yyVAL.node = Nod(OLSH, yyDollar[1].node, yyDollar[3].node)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:872
		{
			yyVAL.node = Nod(ORSH, yyDollar[1].node, yyDollar[3].node)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:877
		{
			yyVAL.node = Nod(OSEND, yyDollar[1].node, yyDollar[3].node)
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:883
		{
			yyVAL.node = Nod(OIFTHEN, yyDollar[3].node, yyDollar[5].node)
			yyVAL.node.Ntest = yyDollar[1].node
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:891
		{
			yyVAL.node = Nod(OIND, yyDollar[2].node, nil)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:895
		{
			if yyDollar[2].node.Op == OCOMPLIT {
				// Special case for &T{...}: turn into (*T){...}.
				yyVAL.node = yyDollar[2].node
				yyVAL.node.Right = Nod(OIND, yyVAL.node.Right, nil)
				yyVAL.node.Right.Implicit = true
			} else {
				yyVAL.node = Nod(OADDR, yyDollar[2].node, nil)
			}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:906
		{
			yyVAL.node = Nod(OPLUS, yyDollar[2].node, nil)
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:910
		{
			yyVAL.node = Nod(OMINUS, yyDollar[2].node, nil)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:914
		{
			yyVAL.node = Nod(ONOT, yyDollar[2].node, nil)
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:918
		{
			Yyerror("the bitwise complement operator is ^")
			yyVAL.node = Nod(OCOM, yyDollar[2].node, nil)
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:923
		{
			yyVAL.node = Nod(OCOM, yyDollar[2].node, nil)
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:927
		{
			yyVAL.node = Nod(ORECV, yyDollar[2].node, nil)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:937
		{
			yyVAL.node = Nod(OCALL, yyDollar[1].node, nil)
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:941
		{
			yyVAL.node = Nod(OCALL, yyDollar[1].node, nil)
			yyVAL.node.List = yyDollar[3].list
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line go.y:946
		{
			yyVAL.node = Nod(OCALL, yyDollar[1].node, nil)
			yyVAL.node.List = yyDollar[3].list
			yyVAL.node.Isddd = true
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:954
		{
			yyVAL.node = nodlit(yyDollar[1].val)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:959
		{
			if yyDollar[1].node.Op == OPACK {
				var s *Sym
				s = restrictlookup(yyDollar[3].sym.Name, yyDollar[1].node.Pkg)
				yyDollar[1].node.Used = true
				yyVAL.node = oldname(s)
				break
			}
			yyVAL.node = Nod(OXDOT, yyDollar[1].node, newname(yyDollar[3].sym))
		}
	case 131:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:970
		{
			yyVAL.node = Nod(ODOTTYPE, yyDollar[1].node, yyDollar[4].node)
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:974
		{
			yyVAL.node = Nod(OTYPESW, nil, yyDollar[1].node)
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:978
		{
			yyVAL.node = Nod(OINDEX, yyDollar[1].node, yyDollar[3].node)
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line go.y:982
		{
			yyVAL.node = Nod(OSLICE, yyDollar[1].node, Nod(OKEY, yyDollar[3].node, yyDollar[5].node))
		}
	case 135:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line go.y:986
		{
			if yyDollar[5].node == nil {
				Yyerror("middle index required in 3-index slice")
			}
			if yyDollar[7].node == nil {
				Yyerror("final index required in 3-index slice")
			}
			yyVAL.node = Nod(OSLICE3, yyDollar[1].node, Nod(OKEY, yyDollar[3].node, Nod(OKEY, yyDollar[5].node, yyDollar[7].node)))
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:997
		{
			// conversion
			yyVAL.node = Nod(OCALL, yyDollar[1].node, nil)
			yyVAL.node.List = list1(yyDollar[3].node)
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1003
		{
			yyVAL.node = yyDollar[3].node
			yyVAL.node.Right = yyDollar[1].node
			yyVAL.node.List = yyDollar[4].list
			fixlbrace(yyDollar[2].i)
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1010
		{
			yyVAL.node = yyDollar[3].node
			yyVAL.node.Right = yyDollar[1].node
			yyVAL.node.List = yyDollar[4].list
		}
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line go.y:1016
		{
			Yyerror("cannot parenthesize type in composite literal")
			yyVAL.node = yyDollar[5].node
			yyVAL.node.Right = yyDollar[2].node
			yyVAL.node.List = yyDollar[6].list
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1025
		{
			// composite expression.
			// make node early so we get the right line number.
			yyVAL.node = Nod(OCOMPLIT, nil, nil)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1033
		{
			yyVAL.node = Nod(OKEY, yyDollar[1].node, yyDollar[3].node)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1039
		{
			// These nodes do not carry line numbers.
			// Since a composite literal commonly spans several lines,
			// the line number on errors may be misleading.
			// Introduce a wrapper node to give the correct line.
			yyVAL.node = yyDollar[1].node
			switch yyVAL.node.Op {
			case ONAME, ONONAME, OTYPE, OPACK, OLITERAL:
				yyVAL.node = Nod(OPAREN, yyVAL.node, nil)
				yyVAL.node.Implicit = true
			}
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1052
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.List = yyDollar[3].list
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1060
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.List = yyDollar[3].list
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1068
		{
			yyVAL.node = yyDollar[2].node

			// Need to know on lhs of := whether there are ( ).
			// Don't bother with the OPAREN in other cases:
			// it's just a waste of memory and time.
			switch yyVAL.node.Op {
			case ONAME, ONONAME, OPACK, OTYPE, OLITERAL, OTYPESW:
				yyVAL.node = Nod(OPAREN, yyVAL.node, nil)
			}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1089
		{
			yyVAL.i = LBODY
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1093
		{
			yyVAL.i = '{'
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1104
		{
			if yyDollar[1].sym == nil {
				yyVAL.node = nil
			} else {
				yyVAL.node = newname(yyDollar[1].sym)
			}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1114
		{
			yyVAL.node = dclname(yyDollar[1].sym)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1119
		{
			yyVAL.node = nil
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1126
		{
			yyVAL.sym = yyDollar[1].sym
			// during imports, unqualified non-exported identifiers are from builtinpkg
			if importpkg != nil && !exportname(yyDollar[1].sym.Name) {
				yyVAL.sym = Pkglookup(yyDollar[1].sym.Name, builtinpkg)
			}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1135
		{
			yyVAL.sym = nil
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1141
		{
			var p *Pkg

			if yyDollar[2].val.U.Sval == "" {
				p = importpkg
			} else {
				if isbadimport(yyDollar[2].val.U.Sval) {
					errorexit()
				}
				p = mkpkg(yyDollar[2].val.U.Sval)
			}
			yyVAL.sym = Pkglookup(yyDollar[4].sym.Name, p)
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1155
		{
			var p *Pkg

			if yyDollar[2].val.U.Sval == "" {
				p = importpkg
			} else {
				if isbadimport(yyDollar[2].val.U.Sval) {
					errorexit()
				}
				p = mkpkg(yyDollar[2].val.U.Sval)
			}
			yyVAL.sym = Pkglookup("?", p)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1171
		{
			yyVAL.node = oldname(yyDollar[1].sym)
			if yyVAL.node.Pack != nil {
				yyVAL.node.Pack.Used = true
			}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1192
		{
			Yyerror("final argument in variadic function missing type")
			yyVAL.node = Nod(ODDD, typenod(typ(TINTER)), nil)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1197
		{
			yyVAL.node = Nod(ODDD, yyDollar[2].node, nil)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1208
		{
			yyVAL.node = yyDollar[2].node
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1217
		{
			yyVAL.node = Nod(OIND, yyDollar[2].node, nil)
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1227
		{
			yyVAL.node = yyDollar[2].node
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1248
		{
			if yyDollar[1].node.Op == OPACK {
				var s *Sym
				s = restrictlookup(yyDollar[3].sym.Name, yyDollar[1].node.Pkg)
				yyDollar[1].node.Used = true
				yyVAL.node = oldname(s)
				break
			}
			yyVAL.node = Nod(OXDOT, yyDollar[1].node, newname(yyDollar[3].sym))
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1261
		{
			yyVAL.node = Nod(OTARRAY, yyDollar[2].node, yyDollar[4].node)
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1265
		{
			// array literal of nelem
			yyVAL.node = Nod(OTARRAY, Nod(ODDD, nil, nil), yyDollar[4].node)
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1270
		{
			yyVAL.node = Nod(OTCHAN, yyDollar[2].node, nil)
			yyVAL.node.Etype = Cboth
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1275
		{
			yyVAL.node = Nod(OTCHAN, yyDollar[3].node, nil)
			yyVAL.node.Etype = Csend
		}
	case 197:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1280
		{
			yyVAL.node = Nod(OTMAP, yyDollar[3].node, yyDollar[5].node)
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1288
		{
			yyVAL.node = Nod(OIND, yyDollar[2].node, nil)
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1294
		{
			yyVAL.node = Nod(OTCHAN, yyDollar[3].node, nil)
			yyVAL.node.Etype = Crecv
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1301
		{
			yyVAL.node = Nod(OTSTRUCT, nil, nil)
			yyVAL.node.List = yyDollar[3].list
			fixlbrace(yyDollar[2].i)
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1307
		{
			yyVAL.node = Nod(OTSTRUCT, nil, nil)
			fixlbrace(yyDollar[2].i)
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1314
		{
			yyVAL.node = Nod(OTINTER, nil, nil)
			yyVAL.node.List = yyDollar[3].list
			fixlbrace(yyDollar[2].i)
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1320
		{
			yyVAL.node = Nod(OTINTER, nil, nil)
			fixlbrace(yyDollar[2].i)
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1331
		{
			yyVAL.node = yyDollar[2].node
			if yyVAL.node == nil {
				break
			}
			if noescape && yyDollar[3].list != nil {
				Yyerror("can only use //go:noescape with external func implementations")
			}
			yyVAL.node.Nbody = yyDollar[3].list
			yyVAL.node.Func.Endlineno = lineno
			yyVAL.node.Noescape = noescape
			yyVAL.node.Func.Nosplit = nosplit
			yyVAL.node.Func.Nowritebarrier = nowritebarrier
			funcbody(yyVAL.node)
		}
	case 207:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1349
		{
			var t *Node

			yyVAL.node = nil
			yyDollar[3].list = checkarglist(yyDollar[3].list, 1)

			if yyDollar[1].sym.Name == "init" {
				yyDollar[1].sym = renameinit()
				if yyDollar[3].list != nil || yyDollar[5].list != nil {
					Yyerror("func init must have no arguments and no return values")
				}
			}
			if localpkg.Name == "main" && yyDollar[1].sym.Name == "main" {
				if yyDollar[3].list != nil || yyDollar[5].list != nil {
					Yyerror("func main must have no arguments and no return values")
				}
			}

			t = Nod(OTFUNC, nil, nil)
			t.List = yyDollar[3].list
			t.Rlist = yyDollar[5].list

			yyVAL.node = Nod(ODCLFUNC, nil, nil)
			yyVAL.node.Nname = newfuncname(yyDollar[1].sym)
			yyVAL.node.Nname.Defn = yyVAL.node
			yyVAL.node.Nname.Ntype = t // TODO: check if nname already has an ntype
			declare(yyVAL.node.Nname, PFUNC)

			funchdr(yyVAL.node)
		}
	case 208:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line go.y:1380
		{
			var rcvr, t *Node

			yyVAL.node = nil
			yyDollar[2].list = checkarglist(yyDollar[2].list, 0)
			yyDollar[6].list = checkarglist(yyDollar[6].list, 1)

			if yyDollar[2].list == nil {
				Yyerror("method has no receiver")
				break
			}
			if yyDollar[2].list.Next != nil {
				Yyerror("method has multiple receivers")
				break
			}
			rcvr = yyDollar[2].list.N
			if rcvr.Op != ODCLFIELD {
				Yyerror("bad receiver in method")
				break
			}

			t = Nod(OTFUNC, rcvr, nil)
			t.List = yyDollar[6].list
			t.Rlist = yyDollar[8].list

			yyVAL.node = Nod(ODCLFUNC, nil, nil)
			yyVAL.node.Func.Shortname = newfuncname(yyDollar[4].sym)
			yyVAL.node.Nname = methodname1(yyVAL.node.Func.Shortname, rcvr.Right)
			yyVAL.node.Nname.Defn = yyVAL.node
			yyVAL.node.Nname.Ntype = t
			yyVAL.node.Nname.Nointerface = nointerface
			declare(yyVAL.node.Nname, PFUNC)

			funchdr(yyVAL.node)
		}
	case 209:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1418
		{
			var s *Sym
			var t *Type

			yyVAL.node = nil

			s = yyDollar[1].sym
			t = functype(nil, yyDollar[3].list, yyDollar[5].list)

			importsym(s, ONAME)
			if s.Def != nil && s.Def.Op == ONAME {
				if Eqtype(t, s.Def.Type) {
					dclcontext = PDISCARD // since we skip funchdr below
					break
				}
				Yyerror("inconsistent definition for func %v during import\n\t%v\n\t%v", s, s.Def.Type, t)
			}

			yyVAL.node = newfuncname(s)
			yyVAL.node.Type = t
			declare(yyVAL.node, PFUNC)

			funchdr(yyVAL.node)
		}
	case 210:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line go.y:1443
		{
			yyVAL.node = methodname1(newname(yyDollar[4].sym), yyDollar[2].list.N.Right)
			yyVAL.node.Type = functype(yyDollar[2].list.N, yyDollar[6].list, yyDollar[8].list)

			checkwidth(yyVAL.node.Type)
			addmethod(yyDollar[4].sym, yyVAL.node.Type, false, nointerface)
			nointerface = false
			funchdr(yyVAL.node)

			// inl.C's inlnode in on a dotmeth node expects to find the inlineable body as
			// (dotmeth's type).Nname.Inl, and dotmeth's type has been pulled
			// out by typecheck's lookdot as this $$.ttype.  So by providing
			// this back link here we avoid special casing there.
			yyVAL.node.Type.Nname = yyVAL.node
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1461
		{
			yyDollar[3].list = checkarglist(yyDollar[3].list, 1)
			yyVAL.node = Nod(OTFUNC, nil, nil)
			yyVAL.node.List = yyDollar[3].list
			yyVAL.node.Rlist = yyDollar[5].list
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1469
		{
			yyVAL.list = nil
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1473
		{
			yyVAL.list = yyDollar[2].list
			if yyVAL.list == nil {
				yyVAL.list = list1(Nod(OEMPTY, nil, nil))
			}
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1482
		{
			yyVAL.list = nil
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1486
		{
			yyVAL.list = list1(Nod(ODCLFIELD, nil, yyDollar[1].node))
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1490
		{
			yyDollar[2].list = checkarglist(yyDollar[2].list, 0)
			yyVAL.list = yyDollar[2].list
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1497
		{
			closurehdr(yyDollar[1].node)
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1503
		{
			yyVAL.node = closurebody(yyDollar[3].list)
			fixlbrace(yyDollar[2].i)
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1508
		{
			yyVAL.node = closurebody(nil)
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1519
		{
			yyVAL.list = nil
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1523
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[2].list)
			if nsyntaxerrors == 0 {
				testdclstack()
			}
			nointerface = false
			noescape = false
			nosplit = false
			nowritebarrier = false
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1537
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[3].list)
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1544
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[3].list)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1550
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1554
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1561
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[3].list)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1567
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1571
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1577
		{
			var l *NodeList

			var n *Node
			l = yyDollar[1].list
			if l == nil {
				// ? symbol, during import (list1(nil) == nil)
				n = yyDollar[2].node
				if n.Op == OIND {
					n = n.Left
				}
				n = embedded(n.Sym, importpkg)
				n.Right = yyDollar[2].node
				n.Val = yyDollar[3].val
				yyVAL.list = list1(n)
				break
			}

			for l = yyDollar[1].list; l != nil; l = l.Next {
				l.N = Nod(ODCLFIELD, l.N, yyDollar[2].node)
				l.N.Val = yyDollar[3].val
			}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1601
		{
			yyDollar[1].node.Val = yyDollar[2].val
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1606
		{
			yyDollar[2].node.Val = yyDollar[4].val
			yyVAL.list = list1(yyDollar[2].node)
			Yyerror("cannot parenthesize embedded type")
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1612
		{
			yyDollar[2].node.Right = Nod(OIND, yyDollar[2].node.Right, nil)
			yyDollar[2].node.Val = yyDollar[3].val
			yyVAL.list = list1(yyDollar[2].node)
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1618
		{
			yyDollar[3].node.Right = Nod(OIND, yyDollar[3].node.Right, nil)
			yyDollar[3].node.Val = yyDollar[5].val
			yyVAL.list = list1(yyDollar[3].node)
			Yyerror("cannot parenthesize embedded type")
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1625
		{
			yyDollar[3].node.Right = Nod(OIND, yyDollar[3].node.Right, nil)
			yyDollar[3].node.Val = yyDollar[5].val
			yyVAL.list = list1(yyDollar[3].node)
			Yyerror("cannot parenthesize embedded type")
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1634
		{
			var n *Node

			yyVAL.sym = yyDollar[1].sym
			n = oldname(yyDollar[1].sym)
			if n.Pack != nil {
				n.Pack.Used = true
			}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1644
		{
			var pkg *Pkg

			if yyDollar[1].sym.Def == nil || yyDollar[1].sym.Def.Op != OPACK {
				Yyerror("%v is not a package", yyDollar[1].sym)
				pkg = localpkg
			} else {
				yyDollar[1].sym.Def.Used = true
				pkg = yyDollar[1].sym.Def.Pkg
			}
			yyVAL.sym = restrictlookup(yyDollar[3].sym.Name, pkg)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1659
		{
			yyVAL.node = embedded(yyDollar[1].sym, localpkg)
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1665
		{
			yyVAL.node = Nod(ODCLFIELD, yyDollar[1].node, yyDollar[2].node)
			ifacedcl(yyVAL.node)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1670
		{
			yyVAL.node = Nod(ODCLFIELD, nil, oldname(yyDollar[1].sym))
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1674
		{
			yyVAL.node = Nod(ODCLFIELD, nil, oldname(yyDollar[2].sym))
			Yyerror("cannot parenthesize embedded type")
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1681
		{
			// without func keyword
			yyDollar[2].list = checkarglist(yyDollar[2].list, 1)
			yyVAL.node = Nod(OTFUNC, fakethis(), nil)
			yyVAL.node.List = yyDollar[2].list
			yyVAL.node.Rlist = yyDollar[4].list
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1695
		{
			yyVAL.node = Nod(ONONAME, nil, nil)
			yyVAL.node.Sym = yyDollar[1].sym
			yyVAL.node = Nod(OKEY, yyVAL.node, yyDollar[2].node)
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1701
		{
			yyVAL.node = Nod(ONONAME, nil, nil)
			yyVAL.node.Sym = yyDollar[1].sym
			yyVAL.node = Nod(OKEY, yyVAL.node, yyDollar[2].node)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1710
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1714
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1719
		{
			yyVAL.list = nil
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1723
		{
			yyVAL.list = yyDollar[1].list
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1731
		{
			yyVAL.node = nil
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1736
		{
			yyVAL.node = liststmt(yyDollar[1].list)
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1741
		{
			yyVAL.node = nil
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1752
		{
			yyDollar[1].node = Nod(OLABEL, yyDollar[1].node, nil)
			yyDollar[1].node.Sym = dclstack // context, for goto restrictions
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1757
		{
			var l *NodeList

			yyDollar[1].node.Defn = yyDollar[4].node
			l = list1(yyDollar[1].node)
			if yyDollar[4].node != nil {
				l = list(l, yyDollar[4].node)
			}
			yyVAL.node = liststmt(l)
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1768
		{
			// will be converted to OFALL
			yyVAL.node = Nod(OXFALL, nil, nil)
			yyVAL.node.Xoffset = int64(block)
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1774
		{
			yyVAL.node = Nod(OBREAK, yyDollar[2].node, nil)
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1778
		{
			yyVAL.node = Nod(OCONTINUE, yyDollar[2].node, nil)
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1782
		{
			yyVAL.node = Nod(OPROC, yyDollar[2].node, nil)
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1786
		{
			yyVAL.node = Nod(ODEFER, yyDollar[2].node, nil)
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1790
		{
			yyVAL.node = Nod(OGOTO, yyDollar[2].node, nil)
			yyVAL.node.Sym = dclstack // context, for goto restrictions
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1795
		{
			yyVAL.node = Nod(ORETURN, nil, nil)
			yyVAL.node.List = yyDollar[2].list
			if yyVAL.node.List == nil && Curfn != nil {
				var l *NodeList

				for l = Curfn.Func.Dcl; l != nil; l = l.Next {
					if l.N.Class == PPARAM {
						continue
					}
					if l.N.Class != PPARAMOUT {
						break
					}
					if l.N.Sym.Def != l.N {
						Yyerror("%s is shadowed during return", l.N.Sym.Name)
					}
				}
			}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1817
		{
			yyVAL.list = nil
			if yyDollar[1].node != nil {
				yyVAL.list = list1(yyDollar[1].node)
			}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1824
		{
			yyVAL.list = yyDollar[1].list
			if yyDollar[3].node != nil {
				yyVAL.list = list(yyVAL.list, yyDollar[3].node)
			}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1833
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1837
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1843
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1847
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1853
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1857
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1863
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1867
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1876
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1880
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1884
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1888
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1893
		{
			yyVAL.list = nil
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1897
		{
			yyVAL.list = yyDollar[1].list
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1911
		{
			yyVAL.node = nil
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1917
		{
			yyVAL.list = nil
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1923
		{
			yyVAL.node = nil
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1929
		{
			yyVAL.list = nil
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1935
		{
			yyVAL.list = nil
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1941
		{
			yyVAL.list = nil
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1947
		{
			yyVAL.val.Ctype = CTxxx
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1957
		{
			importimport(yyDollar[2].sym, yyDollar[3].val.U.Sval)
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1961
		{
			importvar(yyDollar[2].sym, yyDollar[3].typ)
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1965
		{
			importconst(yyDollar[2].sym, Types[TIDEAL], yyDollar[4].node)
		}
	case 309:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line go.y:1969
		{
			importconst(yyDollar[2].sym, yyDollar[3].typ, yyDollar[5].node)
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1973
		{
			importtype(yyDollar[2].typ, yyDollar[3].typ)
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1977
		{
			if yyDollar[2].node == nil {
				dclcontext = PEXTERN // since we skip the funcbody below
				break
			}

			yyDollar[2].node.Func.Inl = yyDollar[3].list

			funcbody(yyDollar[2].node)
			importlist = list(importlist, yyDollar[2].node)

			if Debug['E'] > 0 {
				print("import [%q] func %lN \n", importpkg.Path, yyDollar[2].node)
				if Debug['m'] > 2 && yyDollar[2].node.Func.Inl != nil {
					print("inl body:%+H\n", yyDollar[2].node.Func.Inl)
				}
			}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1998
		{
			yyVAL.sym = yyDollar[1].sym
			structpkg = yyVAL.sym.Pkg
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2005
		{
			yyVAL.typ = pkgtype(yyDollar[1].sym)
			importsym(yyDollar[1].sym, OTYPE)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2025
		{
			yyVAL.typ = pkgtype(yyDollar[1].sym)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2029
		{
			// predefined name like uint8
			yyDollar[1].sym = Pkglookup(yyDollar[1].sym.Name, builtinpkg)
			if yyDollar[1].sym.Def == nil || yyDollar[1].sym.Def.Op != OTYPE {
				Yyerror("%s is not a type", yyDollar[1].sym.Name)
				yyVAL.typ = nil
			} else {
				yyVAL.typ = yyDollar[1].sym.Def.Type
			}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2040
		{
			yyVAL.typ = aindex(nil, yyDollar[3].typ)
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2044
		{
			yyVAL.typ = aindex(nodlit(yyDollar[2].val), yyDollar[4].typ)
		}
	case 323:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:2048
		{
			yyVAL.typ = maptype(yyDollar[3].typ, yyDollar[5].typ)
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2052
		{
			yyVAL.typ = tostruct(yyDollar[3].list)
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2056
		{
			yyVAL.typ = tointerface(yyDollar[3].list)
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:2060
		{
			yyVAL.typ = Ptrto(yyDollar[2].typ)
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:2064
		{
			yyVAL.typ = typ(TCHAN)
			yyVAL.typ.Type = yyDollar[2].typ
			yyVAL.typ.Chan = Cboth
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2070
		{
			yyVAL.typ = typ(TCHAN)
			yyVAL.typ.Type = yyDollar[3].typ
			yyVAL.typ.Chan = Cboth
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2076
		{
			yyVAL.typ = typ(TCHAN)
			yyVAL.typ.Type = yyDollar[3].typ
			yyVAL.typ.Chan = Csend
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2084
		{
			yyVAL.typ = typ(TCHAN)
			yyVAL.typ.Type = yyDollar[3].typ
			yyVAL.typ.Chan = Crecv
		}
	case 331:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:2092
		{
			yyVAL.typ = functype(nil, yyDollar[3].list, yyDollar[5].list)
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2098
		{
			yyVAL.node = Nod(ODCLFIELD, nil, typenod(yyDollar[2].typ))
			if yyDollar[1].sym != nil {
				yyVAL.node.Left = newname(yyDollar[1].sym)
			}
			yyVAL.node.Val = yyDollar[3].val
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2106
		{
			var t *Type

			t = typ(TARRAY)
			t.Bound = -1
			t.Type = yyDollar[3].typ

			yyVAL.node = Nod(ODCLFIELD, nil, typenod(t))
			if yyDollar[1].sym != nil {
				yyVAL.node.Left = newname(yyDollar[1].sym)
			}
			yyVAL.node.Isddd = true
			yyVAL.node.Val = yyDollar[4].val
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2123
		{
			var s *Sym
			var p *Pkg

			if yyDollar[1].sym != nil && yyDollar[1].sym.Name != "?" {
				yyVAL.node = Nod(ODCLFIELD, newname(yyDollar[1].sym), typenod(yyDollar[2].typ))
				yyVAL.node.Val = yyDollar[3].val
			} else {
				s = yyDollar[2].typ.Sym
				if s == nil && Isptr[yyDollar[2].typ.Etype] {
					s = yyDollar[2].typ.Type.Sym
				}
				p = importpkg
				if yyDollar[1].sym != nil {
					p = yyDollar[1].sym.Pkg
				}
				yyVAL.node = embedded(s, p)
				yyVAL.node.Right = typenod(yyDollar[2].typ)
				yyVAL.node.Val = yyDollar[3].val
			}
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:2147
		{
			yyVAL.node = Nod(ODCLFIELD, newname(yyDollar[1].sym), typenod(functype(fakethis(), yyDollar[3].list, yyDollar[5].list)))
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2151
		{
			yyVAL.node = Nod(ODCLFIELD, nil, typenod(yyDollar[1].typ))
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2156
		{
			yyVAL.list = nil
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2163
		{
			yyVAL.list = yyDollar[2].list
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2167
		{
			yyVAL.list = list1(Nod(ODCLFIELD, nil, typenod(yyDollar[1].typ)))
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2177
		{
			yyVAL.node = nodlit(yyDollar[1].val)
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:2181
		{
			yyVAL.node = nodlit(yyDollar[2].val)
			switch yyVAL.node.Val.Ctype {
			case CTINT, CTRUNE:
				mpnegfix(yyVAL.node.Val.U.Xval)
				break
			case CTFLT:
				mpnegflt(yyVAL.node.Val.U.Fval)
				break
			case CTCPLX:
				mpnegflt(&yyVAL.node.Val.U.Cval.Real)
				mpnegflt(&yyVAL.node.Val.U.Cval.Imag)
				break
			default:
				Yyerror("bad negated constant")
			}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2199
		{
			yyVAL.node = oldname(Pkglookup(yyDollar[1].sym.Name, builtinpkg))
			if yyVAL.node.Op != OLITERAL {
				Yyerror("bad constant %v", yyVAL.node.Sym)
			}
		}
	case 345:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:2209
		{
			if yyDollar[2].node.Val.Ctype == CTRUNE && yyDollar[4].node.Val.Ctype == CTINT {
				yyVAL.node = yyDollar[2].node
				mpaddfixfix(yyDollar[2].node.Val.U.Xval, yyDollar[4].node.Val.U.Xval, 0)
				break
			}
			yyDollar[4].node.Val.U.Cval.Real = yyDollar[4].node.Val.U.Cval.Imag
			Mpmovecflt(&yyDollar[4].node.Val.U.Cval.Imag, 0.0)
			yyVAL.node = nodcplxlit(yyDollar[2].node.Val, yyDollar[4].node.Val)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2225
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2229
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2235
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2239
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2245
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2249
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	}
	goto yystack /* stack new state and value */
}
